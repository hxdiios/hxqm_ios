//
//  ToDoListViewController.m
//  hxqm_mobile
//
//  Created by HuaXin on 15-5-10.
//  Copyright (c) 2015年 huaxin. All rights reserved.
//

#import "ToDoListViewController.h"
#import "ToDoListCell.h"
#import "AppConfigure.h"
#import "MyMacros.h"
#import "BaseFunction.h"
#import "SingleProjectManager.h"
#import "SVProgressHUD.h"
#import "Constants.h"
#import "GTMNSString+URLArguments.h"
#import "DeptManager.h"
#import "SectionManager.h"
#import "TemplateManager.h"
#import "CheckManager.h"
#import "CooperateManager.h"
#import "ProblemManager.h"
#import "FMDatabaseQueue.h"
#import "TableInfoViewController.h"
#import "LogUtils.h"
#import "RectifyJsToObjectiveC.h"
#import "PhotoManager.h"

#define TAG @"_ToDoListViewController"

@interface ToDoListViewController () {
    // 判断是否第一次加载
    BOOL isFirst;
    BaseAjaxHttpRequest *request;
    
    FMDatabase *db;
    //
    NSString *selectedTitle;
    NSString *taskShowMode;
}

@end

@implementation ToDoListViewController

@synthesize pulldownMenu;

- (void)viewDidLoad {
    [super viewDidLoad];
    
    db = [BaseFunction createDB];
    [db open];
    // 初始化数据
    taskList = [NSMutableArray array];
    isInitLoading = YES;
    _table.delegate = self;
    _table.dataSource = self;
    // 不显示没内容的Cell
    _table.tableFooterView = [[UIView alloc] init];
    isFirst = YES;
    
    //添加下拉view
    if (refreshHeaderView == nil) {
        refreshHeaderView = [[EGORefreshTableHeaderView alloc] initWithFrame:CGRectMake(0.0f, 0.0f - _table.bounds.size.height, _table.frame.size.width, _table.bounds.size.height)];
        refreshHeaderView.delegate = self;
        [_table addSubview:refreshHeaderView];
    }
    [refreshHeaderView refreshLastUpdatedDate];
    [self initEmptyViewWithFrame:CGRectMake(0, 0, _table.frame.size.width, _table.frame.size.height)];
    //添加菜单
    //添加下拉选择菜单
    taskShowMode = [AppConfigure objectForKey:TASK_SHOW_MODE];
    if(taskShowMode==nil || [@"2" isEqualToString:taskShowMode]){
        selectedTitle = @"全部";
    }else if([@"3" isEqualToString:taskShowMode]){
        selectedTitle = @"检查";
    }else if([@"4" isEqualToString:taskShowMode]){
        selectedTitle = @"整改";
    }
    [self addNavRightBtnByTitle:selectedTitle icon:nil action:@selector(flowout)];
    pulldownMenu = [[PulldownMenu alloc] initWithNavigationController:self.navigationController];
    [self.navigationController.view insertSubview:pulldownMenu belowSubview:self.navigationController.navigationBar];
    [pulldownMenu insertButton:@"全部"];
    [pulldownMenu insertButton:@"检查"];
    [pulldownMenu insertButton:@"整改"];
    pulldownMenu.delegate = self;
    [pulldownMenu loadMenu];
    //获取数据
    [self loadDatasWithShowAlert];
    NSString *need_refresh = [AppConfigure objectForKey:NEED_REFRESH];
    if([@"1" isEqualToString:need_refresh]){
        [self reqData];
    }
}

#pragma mark 加载数据
-(void) loadDatasWithShowAlert{
    if(isInitLoading) {
        [self.view addSubview:emptyView];
        [emptyView showLoading];
    }
    
    [self getTaskList];
}

#pragma mark 从本地数据库中获取任务列表
- (void)getTaskList {
    if(isInitLoading) {
        [self.view addSubview:emptyView];
        [emptyView showLoading];
    }
    SingleProjectManager *singleProjectManager = [[SingleProjectManager alloc] initWithDb:db];
    // 获取任务列表
    taskShowMode = [AppConfigure objectForKey:TASK_SHOW_MODE];
    if([@"3" isEqualToString:taskShowMode]){
        taskList = [singleProjectManager getCheckList:[AppConfigure objectForKey:USERID]];
    }else if([@"4" isEqualToString:taskShowMode]){
        taskList = [singleProjectManager getProblemReplyList:[AppConfigure objectForKey:USERID]];
    }else if(taskShowMode==nil || [@"2" isEqualToString:taskShowMode]){
        taskList = [singleProjectManager getCheckList:[AppConfigure objectForKey:USERID]];
        [taskList addObjectsFromArray:[singleProjectManager getProblemReplyList:[AppConfigure objectForKey:USERID]]];
    }
    isInitLoading = NO;
    [emptyView dismiss];
    // 数据为空说明获取失败
    if (taskList == nil) {
        [SVProgressHUD showErrorWithStatus:@"数据加载失败"];
    } else if (taskList.count == 0) {// 账户没有任务
        [_table reloadData];
        [SVProgressHUD showErrorWithStatus:@"当前账户没有任务"];
    } else {// 数据不为空且有任务
        //加载数据
        [_table reloadData];
    }
    
    [self doneLoadingTableView:_table height:UI_SCREEN_HEIGHT - 64];
    
}

#pragma mark 请求刷新数据
-(void) reqData {
    if ([request isExecuting]) {
        [request clearDelegatesAndCancel];
    }
    
    [self updateDatas];
}

#pragma mark 下拉刷新列表数据
- (void)updateDatas {
    // 设置请求URL
    NSURL *url = [NSURL URLWithString:TASK_LIST];
    request = [BaseAjaxHttpRequest requestWithURL:url];
    __weak BaseAjaxHttpRequest *weakRequest = request;
    // 设置请求参数
    NSDictionary *params = @{@"CHECK_TYPE":@"4,3"};
    [request setPostBody:params];
    
    __weak typeof(self) weakSelf = self;
    
    [request setCompletionBlock:^{
        NSError *err;
        NSString *responseString = [weakRequest responseString];
        // 判断返回值是否为登录超时
        if ([responseString myContainsString:SESSION_TIMEOUT]) {
            NSLog(@"sche %@",@"session time out");
            [LogUtils Log:TAG content:[NSString stringWithFormat:@"responseString = %@", responseString]];
            [weakSelf sessionTimeout];
        } else {
            NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:[responseString dataUsingEncoding:NSUTF8StringEncoding] options:kNilOptions error:&err];
            //            [LogUtils Log:TAG content:[NSString stringWithFormat:@"dic = %@", dic]];
            [LogUtils Log:TAG content:[NSString stringWithFormat:@"error = %@", err]];
            FMDatabaseQueue *queue = [BaseFunction createDBQueue];
            [queue inTransaction:^(FMDatabase *db1, BOOL *rollback) {
                //数据库更新
                for(NSString *keys in dic) {
                    if([keys myContainsString:@"List"]) {
                        id<IGsonDataSaver> dbManager = [weakSelf getDataManager:keys];
                        ClientDBManager *manager = (ClientDBManager *) dbManager;
                        [manager sharedDatabase:db1];
                        NSString *userid = [AppConfigure objectForKey:USERID];
                        NSArray *array = [dic objectForKey:keys];
                        for(NSInteger i = 0;i < array.count;i++) {
                            NSDictionary *oneRecord = [array objectAtIndex:i];
                            if(dbManager !=nil){
                                if([dbManager insertOneRecord:oneRecord userid:userid]) {
                                    [LogUtils Log:TAG content:@"insert suceess"];
                                } else {
                                    *rollback = YES;
                                    return ;
                                }
                            }else{
                                NSLog(@"data leaked!");
                            }

                        }
                    }
                }
            }];
            [queue close];
            
            NSString *neednext = [dic objectForKey:NEED_NEXT];
            if(IsStringNotEmpty(neednext) && ![@"false" isEqualToString:neednext] && ![@"(null)" isEqualToString:neednext]) {
                [LogUtils Log:TAG content:@"需要下次请求"];
                //继续迭代请求
                [weakSelf updateDatas];
            }
        }
        
        // 刷新列表数据
        [weakSelf getTaskList];
        [weakSelf tableEndload];
    }];
    [request setFailedBlock:^{
        [SVProgressHUD showErrorWithStatus:@"无法访问服务或网络"];
        [weakSelf tableEndload];
    }];
    [request startAsynchronous];
}

/**
 *  获取插入数据库的操作类
 *
 *  @param name List名
 *
 *  @return 数据库操作类
 */
- (id<IGsonDataSaver>) getDataManager : (NSString *) name{
    id<IGsonDataSaver> dbManager;
    if([name isEqualToString:@"singleList"]) {
        dbManager = [[SingleProjectManager alloc] init];
    } else if([name isEqualToString:@"deptList"]) {
        dbManager = [[DeptManager alloc] init];
    } else if([name isEqualToString:@"selectionList"]) {
        dbManager = [[SectionManager alloc] init];
    } else if([name isEqualToString:@"excludeTemplateList"]) {
        dbManager = [[TemplateManager alloc] init];
    } else if([name isEqualToString:@"checkProjectList"]) {
        dbManager = [[CheckManager alloc] init];
    } else if([name isEqualToString:@"problemList"] || [name isEqualToString:@"problemDelayList"]|| [name isEqualToString:@"relativeOrgList"]) {
        dbManager = [[ProblemManager alloc] init];
    } else if([name isEqualToString:@"cooperateList"]) {
        dbManager = [[CooperateManager alloc] init];
    } else if([name isEqualToString:@"photoList"]) {
        dbManager = [[PhotoManager alloc] init];
    }  else {
        return nil;
    }
    return dbManager;
}

- (void)tableEndload {
    isInitLoading = NO;
    [emptyView dismiss];
    [self doneLoadingTableView:_table height:UI_SCREEN_HEIGHT - 64];
}

#pragma mark - UITableViewDelegate,UITableViewDataSource
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return taskList.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    int row = (int)indexPath.row;
    static NSString *CustomCellIdentifier = @"ToDoListCell";
    
    static BOOL nibsRegistered = NO;
    ToDoListCell *cell = (ToDoListCell *)[tableView dequeueReusableCellWithIdentifier:CustomCellIdentifier];
    if (cell == nil) {
        nibsRegistered = NO;
    }
    if (!nibsRegistered) {
        [LogUtils Log:TAG content:@"cell is nil"];
        UINib *nib = [UINib nibWithNibName:NSStringFromClass([ToDoListCell class]) bundle:nil];
        [tableView registerNib:nib forCellReuseIdentifier:CustomCellIdentifier];
        nibsRegistered = YES;
        cell = (ToDoListCell *)[tableView dequeueReusableCellWithIdentifier:CustomCellIdentifier];
    }
    
    [cell initViewWithData:[taskList objectAtIndex:row]];
    return cell;
}

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    [tableView deselectRowAtIndexPath:indexPath animated:NO];
    NSDictionary *selectedCellData = [taskList objectAtIndex:indexPath.row];
    NSString *item_type = [selectedCellData objectForKey:@"item_type"];
    if([@"4" isEqualToString:item_type]){
        RectifyJsToObjectiveC *rectifyViewController = [[RectifyJsToObjectiveC alloc] init];
        rectifyViewController.boProblemReplyId = [selectedCellData objectForKey:@"bo_problem_reply_id"];
        rectifyViewController.boProblemId = [selectedCellData objectForKey:@"bo_problem_id"];
        rectifyViewController.types = [selectedCellData objectForKey:@"type"];
        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:rectifyViewController];
        [self.navigationController presentViewController:nav animated:YES completion:nil];
    }else if([@"3" isEqualToString:item_type]){
        TableInfoViewController *tableInfoViewController = [[TableInfoViewController alloc] initWithNibName:@"TableInfoViewController" bundle:nil];
        tableInfoViewController.projectID = [selectedCellData objectForKey:@"bo_single_project_id"];
        tableInfoViewController.type = @"2";
        tableInfoViewController.sectionID = @"null";
        tableInfoViewController.delegate = self;
        UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:tableInfoViewController];
        [self.navigationController presentViewController:nav animated:YES completion:nil];
    }
}

// 动态计算列表cell的高度
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    ToDoListCell *cell = (ToDoListCell *) [self tableView:tableView cellForRowAtIndexPath:indexPath];
    [cell.projectName sizeToFit];
    CGSize labelSize = [cell.projectName.text sizeWithAttributes:@{NSFontAttributeName:cell.projectName.font}];
    
    float lines = labelSize.width / (UI_SCREEN_WIDTH - 16);
    int l = (int) lines;
    int lines_final = 0;
    if (lines - l > 0) {
        lines_final = lines + 1;
    } else {
        lines_final = l;
    }
    float part1 = 10 + lines_final * labelSize.height;
    float part2 = 4 + cell.start_date.frame.size.height;
    float part3 = 11;
    float height = part1 + part2 + part3;
    
    return 1  + height;
}

// 列表cell高度估算方法
- (CGFloat)tableView:(UITableView *)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return 66.0f;
}

#pragma mark - 重新登录
// 登录成功
- (void)loginSuccess {
    [self updateDatas];
}

// 登录失败
- (void)loginFailed {
    NSLog(@"%@", NSStringFromSelector(_cmd));
}

- (void)viewDidAppear:(BOOL)animated {
    BOOL isOpened = [db open];
    NSLog(@"she %@",isOpened ? @"opened" : @"not opened");
    if (!isFirst) {
        [LogUtils Log:TAG content:@"is not first, refresh datas"];
        [self getTaskList];
        taskShowMode = [AppConfigure objectForKey:TASK_SHOW_MODE];
        if(taskShowMode==nil || [@"2" isEqualToString:taskShowMode]){
            selectedTitle = @"全部";
        }else if([@"3" isEqualToString:taskShowMode]){
            selectedTitle = @"检查";
        }else if([@"4" isEqualToString:taskShowMode]){
            selectedTitle = @"整改";
        }
        [self addNavRightBtnByTitle:selectedTitle icon:nil action:@selector(flowout)];
    } else {
        isFirst = NO;
    }
}

- (void) viewDidDisappear:(BOOL)animated {
    [db close];
    if ([request isExecuting]) {
        [request clearDelegatesAndCancel];
    }
}

// tabbar上的数字减一
- (void) delOneBadge {
    NSString *badgeValue;
    NSInteger badgeNum = [AppConfigure integerForKey:APP_ICON_BADGE_NUM];
    if(badgeNum <= 0) {
        badgeValue = nil;
    } else {
        badgeValue = [NSString stringWithFormat:@"%ld",badgeNum];
    }
    self.navigationController.tabBarItem.badgeValue = badgeValue;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)menuItemSelected:(NSIndexPath *)indexPath
{
    NSString *selectedType = @"";
    if(indexPath.row==0){
        selectedTitle = @"全部";
        [AppConfigure setObject:@"2" ForKey:TASK_SHOW_MODE];
    }else if(indexPath.row==1){
        selectedTitle = @"检查";
        [AppConfigure setObject:@"3" ForKey:TASK_SHOW_MODE];
    }else if(indexPath.row==2){
        selectedTitle = @"整改";
        [AppConfigure setObject:@"4" ForKey:TASK_SHOW_MODE];
    }
    [self addNavRightBtnByTitle:selectedTitle icon:nil action:@selector(flowout)];
    [pulldownMenu animateDropDown];
    [self getTaskList];
}

- (void)flowout {
    [pulldownMenu animateDropDown];
}

-(void)pullDownAnimated:(BOOL)open
{}
@end
