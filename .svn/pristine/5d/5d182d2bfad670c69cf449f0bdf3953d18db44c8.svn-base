//
//  HomeViewController.m
//  hxqm_mobile
//
//  Created by HelloWorld on 1/14/15.
//  Copyright (c) 2015 huaxin. All rights reserved.
//

#import "HomeViewController.h"
#import "ValidateViewController.h"
#import "MyMacros.h"
#import "SVProgressHUD.h"
#import "LoadingProgress.h"
#import "CustomIOS7AlertView.h"
#import "EmptyView.h"
#import "MyBrowseViewController.h"
#import "MyFavoriteViewController.h"
#import "UploadLocationViewController.h"
#import "ShakeViewController.h"
#import "PhotoBrowseController.h"
#import "FICDViewController.h"
#import "LogUtils.h"
#import "CooperatePlanview.h"
#import "BaseFormDataRequest.h"
#import "AppConfigure.h"
#import "TableInfoViewController.h"
#import "SectionViewController.h"
#import "SectionManager.h"
#import "SingleProjectManager.h"
#import "BaseFunction.h"

#define TAG @"_HomeViewController"
#define MARGIN_LEFT_RIGHT 6
#define MARGIN_TOP_OR_BOTTOM 8
#define MARGIN 5
#define IMAGE_TYPE_30 @"30x30"
#define IMAGE_TYPE_60 @"60x60"
#define _VERIFY 101

@interface HomeViewController () {
    CustomIOS7AlertView *progressAlert;
    LoadingProgress *progress;
    // 配置数组
    NSMutableArray *row2Array;
    NSMutableArray *row3Array;
    NSMutableArray *row4Array;
    FMDatabase *db;
}

@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;

@property (strong, nonatomic) UIView *mainView;
//上传图片的数量
@property (strong, nonatomic) UILabel *uploadNum;
//不在上传状态下显示的view
@property (strong, nonatomic) UIView *uploadView;
//在上传状态下显示的view
@property (strong, nonatomic) UIView *uploadingView;
//上传图片的进度条
@property (strong, nonatomic) UIProgressView *uploadingProgress;
//显示上传到第几张图片和图片的总量
@property (strong, nonatomic) UILabel *uploadingPicNum;
//巡检数量
@property (strong, nonatomic) UILabel *pollingNum;
//整改数量
@property (strong, nonatomic) UILabel *rectificationNum;
//抽查数量
@property (strong, nonatomic) UILabel *spotTestNum;
//出工计划数量
@property (strong, nonatomic) UILabel *planNum;

@end

@implementation HomeViewController {
    CGFloat width_10_4;
    CGFloat height_small;
    CGFloat width_5_4_small;
    CGFloat width_5_4_big;
    CGFloat height_big;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    db = [BaseFunction createDB];
    [db open];
    [self initView];
    [super getUpdatableNum];
}

/**
 *  初始化控件
 */
- (void) initView {
    // 设置首页标题栏文字
    self.navigationItem.title = @"智检通";
    // 设置首页标题栏文字的样式
    [[UINavigationBar appearance] setTitleTextAttributes: [NSDictionary dictionaryWithObjectsAndKeys:[UIColor whiteColor], NSForegroundColorAttributeName, nil]];
    
    CGFloat ScreenWidth = UI_SCREEN_WIDTH;
    width_10_4 = (ScreenWidth - MARGIN_LEFT_RIGHT - MARGIN) / 2;
    width_5_4_small = (width_10_4 - MARGIN) / 2;
    width_5_4_big = width_10_4;
    height_small = width_10_4 * 0.4;
    height_big = height_small * 2;
    
    row2Array = [NSMutableArray arrayWithObjects:@"1", @"1", @"1", @"1", @"1", nil];
    row3Array = [NSMutableArray arrayWithObjects:@"1", @"1", @"1", nil];
    row4Array = [NSMutableArray arrayWithObjects:@"1", @"1", @"1", nil];
    
    [self initMainView];
}

- (void)initMainView {
    CGFloat totalHeight = MARGIN_TOP_OR_BOTTOM * 2 + MARGIN * 5 + height_small * 7;
    _mainView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, UI_SCREEN_WIDTH, totalHeight)];
    CGFloat rowXLeft = MARGIN_LEFT_RIGHT / 2;
    CGFloat rowYLeft = MARGIN_TOP_OR_BOTTOM;
    CGFloat rowXRight = rowXLeft + width_10_4 + MARGIN;
    CGFloat rowYRight = MARGIN_TOP_OR_BOTTOM;
    /** 第一行 **/
    // 签到
    UIButton *checkInUIButton = [self getUIButtonWithFrame:CGRectMake(rowXLeft, rowYLeft, width_10_4, height_small) color:[UIColor colorWithRed:83/255.0 green:161/255.0 blue:225/255.0 alpha:1.0]];
    [checkInUIButton addTarget:self action:@selector(checkIn:) forControlEvents:UIControlEventTouchUpInside];
    UIView *checkInView = [[UIView alloc] initWithFrame:CGRectMake((width_10_4 - 80) / 2, (height_small - 44) / 2, 80, 44)];
    checkInView.userInteractionEnabled = NO;
    UIImageView *checkInImg = [self getImageViewWithImageName:@"icon_check_in" XYPoint:CGPointMake(0, 7) type:IMAGE_TYPE_30];
    UILabel *checkInLabel = [self getLabelWithTitle:@"签到" frame:CGRectMake(35, 12, 40, 20)];
    [checkInView addSubview:checkInImg];
    [checkInView addSubview:checkInLabel];
    [checkInUIButton addSubview:checkInView];
    // 上传
    UIButton *uploadUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight, rowYRight, width_10_4, height_small) color:[UIColor colorWithRed:43/255.0 green:138/255.0 blue:217/255.0 alpha:1.0]];
    [uploadUIButton addTarget:self action:@selector(upload:) forControlEvents:UIControlEventTouchUpInside];
    _uploadView = [[UIView alloc] initWithFrame:CGRectMake((width_10_4 - 120) / 2, (height_small - 44) / 2, 120, 44)];
    _uploadView.userInteractionEnabled = NO;
    UIImageView *uploadImg = [self getImageViewWithImageName:@"icon_upload" XYPoint:CGPointMake(0, 7) type:IMAGE_TYPE_30];
    _uploadNum = [self getLabelWithTitle:@"上 传(0)" frame:CGRectMake(35, 12, 85, 20)];
    [_uploadView addSubview:uploadImg];
    [_uploadView addSubview:_uploadNum];
    _uploadingView = [[UIView alloc] initWithFrame:CGRectMake(8, (height_small - 30) / 2, width_10_4 - 16, 30)];
    _uploadingView.userInteractionEnabled = NO;
    _uploadingProgress = [[UIProgressView alloc] initWithFrame:CGRectMake(0, 14, width_10_4 - 65, 2)];
    _uploadingProgress.progressTintColor = [UIColor whiteColor];
    _uploadingPicNum = [self getLabelWithTitle:@"100/200" frame:CGRectMake(width_10_4 - 63, 7, 62, 16)];
    _uploadingPicNum.font = [UIFont systemFontOfSize:12.0];
    [_uploadingView addSubview:_uploadingProgress];
    [_uploadingView addSubview:_uploadingPicNum];
    [uploadUIButton addSubview:_uploadView];
    [uploadUIButton addSubview:_uploadingView];
    [_uploadingView setHidden:YES];
    /** 第二行 **/
    // 巡检
    rowYLeft += height_small + MARGIN;
    UIButton *pollingUIButton = [self getUIButtonWithFrame:CGRectMake(rowXLeft, rowYLeft, width_5_4_big, height_big) color:[UIColor colorWithRed:55/255.0 green:142/255.0 blue:245/255.0 alpha:1.0]];
    [pollingUIButton addTarget:self action:@selector(polling:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *pollingImg = [self getImageViewWithImageName:@"icon_xunjian" XYPoint:CGPointMake((width_5_4_big - 60) / 2, (height_big - 60) / 2) type:IMAGE_TYPE_60];
    _pollingNum = [self getLabelWithTitle:@"巡检(0)" frame:CGRectMake(3, 3, width_5_4_big - 10, 20)];
    [pollingUIButton addSubview:pollingImg];
    [pollingUIButton addSubview:_pollingNum];
    if ([@"0" isEqualToString:row2Array[0]]) {
        [pollingUIButton setHidden:YES];
    }
    // 整改
    rowYRight += height_small + MARGIN;
    UIButton *rectificateUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight, rowYRight, width_5_4_small, height_small) color:[UIColor colorWithRed:13/255.0 green:99/255.0 blue:201/255.0 alpha:1.0]];
    [rectificateUIButton addTarget:self action:@selector(rectificate:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *rectificateImg = [self getImageViewWithImageName:@"icon_zhenggai" XYPoint:CGPointMake((width_5_4_small - 30) / 2, (height_small - 30) / 2 + 5) type:IMAGE_TYPE_30];
    _rectificationNum = [self getLabelWithTitle:@"整改(0)" frame:CGRectMake(3, 3, width_5_4_small - 3, 20)];
    [rectificateUIButton addSubview:rectificateImg];
    [rectificateUIButton addSubview:_rectificationNum];
    if ([@"0" isEqualToString:row2Array[1]]) {
        [rectificateUIButton setHidden:YES];
    }
    // 快捷整改
    UIButton *fastRectificateUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight + width_5_4_small + MARGIN, rowYRight, width_5_4_small, height_small) color:[UIColor colorWithRed:13/255.0 green:99/255.0 blue:201/255.0 alpha:1.0]];
    [fastRectificateUIButton addTarget:self action:@selector(fastRectificate:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *fastRectificateImg = [self getImageViewWithImageName:@"icon_kjzg" XYPoint:CGPointMake((width_5_4_small - 30) / 2, (height_small - 30) / 2 + 5) type:IMAGE_TYPE_30];
    UILabel *fastRectificateLabel = [self getLabelWithTitle:@"快捷整改" frame:CGRectMake(3, 3, width_5_4_small - 3, 20)];
    [fastRectificateUIButton addSubview:fastRectificateImg];
    [fastRectificateUIButton addSubview:fastRectificateLabel];
    if ([@"0" isEqualToString:row2Array[2]]) {
        [fastRectificateUIButton setHidden:YES];
    }
    // 快捷巡检
    rowYLeft += height_big + MARGIN;
    UIButton *fastPollingUIButton = [self getUIButtonWithFrame:CGRectMake(rowXLeft, rowYLeft, width_10_4, height_small) color:[UIColor colorWithRed:0/255.0 green:198/255.0 blue:168/255.0 alpha:1.0]];
    [fastPollingUIButton addTarget:self action:@selector(fastPolling:) forControlEvents:UIControlEventTouchUpInside];
    UIView *fastPollingView = [[UIView alloc] initWithFrame:CGRectMake((width_10_4 - 120) / 2, (height_small - 44) / 2, 120, 44)];
    fastPollingView.userInteractionEnabled = NO;
    UIImageView *fastPollingImg = [self getImageViewWithImageName:@"icon_kjxj" XYPoint:CGPointMake(0, 7) type:IMAGE_TYPE_30];
    UILabel *fastPollingLabel = [self getLabelWithTitle:@"快捷巡检" frame:CGRectMake(35, 12, 85, 20)];
    [fastPollingView addSubview:fastPollingImg];
    [fastPollingView addSubview:fastPollingLabel];
    [fastPollingUIButton addSubview:fastPollingView];
    if ([@"0" isEqualToString:row2Array[3]]) {
        [fastPollingUIButton setHidden:YES];
    }
    // 抽查
    rowYRight += height_small + MARGIN;
    UIButton *checkUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight, rowYRight, width_5_4_big, height_big) color:[UIColor colorWithRed:0/255.0 green:198/255.0 blue:168/255.0 alpha:1.0]];
    [checkUIButton addTarget:self action:@selector(check:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *checkImg = [self getImageViewWithImageName:@"icon_choucha" XYPoint:CGPointMake((width_5_4_big - 60) / 2, (height_big - 60) / 2) type:IMAGE_TYPE_60];
    _spotTestNum = [self getLabelWithTitle:@"抽查(0)" frame:CGRectMake(3, 3, width_5_4_big - 10, 20)];
    [checkUIButton addSubview:checkImg];
    [checkUIButton addSubview:_spotTestNum];
    if ([@"0" isEqualToString:row2Array[4]]) {
        [checkUIButton setHidden:YES];
    }
    /** 第三行 **/
    // 最近浏览
    rowYLeft += height_small + MARGIN;
    UIButton *recentlyViewedUIButton = [self getUIButtonWithFrame:CGRectMake(rowXLeft, rowYLeft, width_5_4_small, height_small) color:[UIColor colorWithRed:75/255.0 green:190/255.0 blue:35/255.0 alpha:1.0]];
    [recentlyViewedUIButton addTarget:self action:@selector(recentlyViewed:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *recentlyViewedImg = [self getImageViewWithImageName:@"icon_liulan" XYPoint:CGPointMake((width_5_4_small - 30) / 2, (height_small - 30) / 2 + 5) type:IMAGE_TYPE_30];
    UILabel *recentlyViewedLabel = [self getLabelWithTitle:@"最近浏览" frame:CGRectMake(3, 3, width_5_4_small - 3, 20)];
    [recentlyViewedUIButton addSubview:recentlyViewedImg];
    [recentlyViewedUIButton addSubview:recentlyViewedLabel];
    if ([@"0" isEqualToString:row3Array[0]]) {
        [recentlyViewedUIButton setHidden:YES];
    }
    // 我的收藏
    UIButton *myFavoritesUIButton = [self getUIButtonWithFrame:CGRectMake(rowXLeft + MARGIN + width_5_4_small, rowYLeft, width_5_4_small, height_small) color:[UIColor colorWithRed:75/255.0 green:190/255.0 blue:35/255.0 alpha:1.0]];
    [myFavoritesUIButton addTarget:self action:@selector(myFavorites:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *myFavoritesImg = [self getImageViewWithImageName:@"icon_favorite" XYPoint:CGPointMake((width_5_4_small - 30) / 2, (height_small - 30) / 2 + 5) type:IMAGE_TYPE_30];
    UILabel *myFavoritesLabel = [self getLabelWithTitle:@"我的收藏" frame:CGRectMake(3, 3, width_5_4_small - 3, 20)];
    [myFavoritesUIButton addSubview:myFavoritesImg];
    [myFavoritesUIButton addSubview:myFavoritesLabel];
    if ([@"0" isEqualToString:row3Array[1]]) {
        [myFavoritesUIButton setHidden:YES];
    }
    // 出工计划
    rowYRight += height_big + MARGIN;
    UIButton *gotoWorkPlanUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight, rowYRight, width_10_4, height_small) color:[UIColor colorWithRed:75/255.0 green:190/255.0 blue:35/255.0 alpha:1.0]];
    [gotoWorkPlanUIButton addTarget:self action:@selector(goToWorkPlan:) forControlEvents:UIControlEventTouchUpInside];
    UIView *gotoWorkPlanView = [[UIView alloc] initWithFrame:CGRectMake((width_10_4 - 130) / 2, (height_small - 44) / 2, 130, 44)];
    gotoWorkPlanView.userInteractionEnabled = NO;
    UIImageView *gotoWorkPlanImg = [self getImageViewWithImageName:@"icon_cgjh" XYPoint:CGPointMake(0, 7) type:IMAGE_TYPE_30];
    _planNum = [self getLabelWithTitle:@"出工计划(0)" frame:CGRectMake(31, 12, 100, 20)];
    [gotoWorkPlanView addSubview:gotoWorkPlanImg];
    [gotoWorkPlanView addSubview:_planNum];
    [gotoWorkPlanUIButton addSubview:gotoWorkPlanView];
    if ([@"0" isEqualToString:row3Array[2]]) {
        [gotoWorkPlanUIButton setHidden:YES];
    }
    /** 第四行 **/
    // 照片管理
    rowYLeft += height_small + MARGIN;
    UIButton *photoManageUIButton = [self getUIButtonWithFrame:CGRectMake(rowXLeft, rowYLeft, width_10_4, height_small) color:[UIColor colorWithRed:255/255.0 green:168/255.0 blue:0/255.0 alpha:1.0]];
    [photoManageUIButton addTarget:self action:@selector(photosManage:) forControlEvents:UIControlEventTouchUpInside];
    UIView *photoManageView = [[UIView alloc] initWithFrame:CGRectMake((width_10_4 - 120) / 2, (height_small - 44) / 2, 120, 44)];
    photoManageView.userInteractionEnabled = NO;
    UIImageView *photoManageImg = [self getImageViewWithImageName:@"icon_photos" XYPoint:CGPointMake(0, 7) type:IMAGE_TYPE_30];
    UILabel *photoManageLabel = [self getLabelWithTitle:@"照片管理" frame:CGRectMake(35, 12, 85, 20)];
    [photoManageView addSubview:photoManageImg];
    [photoManageView addSubview:photoManageLabel];
    [photoManageUIButton addSubview:photoManageView];
    if ([@"0" isEqualToString:row4Array[0]]) {
        [photoManageUIButton setHidden:YES];
    }
    // 上传坐标
    rowYRight += height_small + MARGIN;
    UIButton *uploadCoordinateUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight, rowYRight, width_5_4_small, height_small) color:[UIColor colorWithRed:255/255.0 green:168/255.0 blue:0/255.0 alpha:1.0]];
    [uploadCoordinateUIButton addTarget:self action:@selector(uploadCoordinate:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *uploadCoordinateImg = [self getImageViewWithImageName:@"icon_sczb" XYPoint:CGPointMake((width_5_4_small - 30) / 2, (height_small - 30) / 2 + 5) type:IMAGE_TYPE_30];
    UILabel *uploadCoordinateLabel = [self getLabelWithTitle:@"上传坐标" frame:CGRectMake(3, 3, width_5_4_small - 3, 20)];
    [uploadCoordinateUIButton addSubview:uploadCoordinateImg];
    [uploadCoordinateUIButton addSubview:uploadCoordinateLabel];
    // 摇一摇
//    UIButton *shakingUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight + width_5_4_small + MARGIN, rowYLeft, width_5_4_small, height_small) color:[UIColor colorWithRed:254/255.0 green:134/255.0 blue:74/255.0 alpha:1.0]];
    UIButton *shakingUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight + width_5_4_small + MARGIN, rowYLeft, width_5_4_small, height_small) color:[UIColor colorWithRed:255/255.0 green:168/255.0 blue:0/255.0 alpha:1.0]];
    [shakingUIButton addTarget:self action:@selector(shake:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *shakingImg = [self getImageViewWithImageName:@"icon_shake" XYPoint:CGPointMake((width_5_4_small - 30) / 2, (height_small - 30) / 2 + 5) type:IMAGE_TYPE_30];
    UILabel *shakingLabel = [self getLabelWithTitle:@"摇一摇" frame:CGRectMake(3, 3, width_5_4_small - 3, 20)];
    [shakingUIButton addSubview:shakingImg];
    [shakingUIButton addSubview:shakingLabel];
    
    /** 第五行 **/
    rowYLeft += height_small + MARGIN;
    // 通告
    UIButton *announceUIButton = [self getUIButtonWithFrame:CGRectMake(rowXLeft, rowYLeft, width_5_4_small, height_small) color:[UIColor colorWithRed:254/255.0 green:134/255.0 blue:74/255.0 alpha:1.0]];
    [announceUIButton addTarget:self action:@selector(announce:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *announceImg = [self getImageViewWithImageName:@"icon_tg" XYPoint:CGPointMake((width_5_4_small - 30) / 2, (height_small - 30) / 2 + 5) type:IMAGE_TYPE_30];
    UILabel *announceLabel = [self getLabelWithTitle:@"通告" frame:CGRectMake(3, 3, width_5_4_small - 3, 20)];
    [announceUIButton addSubview:announceImg];
    [announceUIButton addSubview:announceLabel];
    // 排行榜
    UIButton *rankingUIButton = [self getUIButtonWithFrame:CGRectMake(rowXLeft + width_5_4_small + MARGIN, rowYLeft, width_5_4_small, height_small) color:[UIColor colorWithRed:254/255.0 green:134/255.0 blue:74/255.0 alpha:1.0]];
    [rankingUIButton addTarget:self action:@selector(ranking:) forControlEvents:UIControlEventTouchUpInside];
    UIImageView *rankingImg = [self getImageViewWithImageName:@"icon_paihang" XYPoint:CGPointMake((width_5_4_small - 30) / 2, (height_small - 30) / 2 + 5) type:IMAGE_TYPE_30];
    UILabel *rankingLabel = [self getLabelWithTitle:@"排行榜" frame:CGRectMake(3, 3, width_5_4_small - 3, 20)];
    [rankingUIButton addSubview:rankingImg];
    [rankingUIButton addSubview:rankingLabel];
    if ([@"0" isEqualToString:row4Array[2]]) {
        [rankingUIButton setHidden:YES];
    }
    // 统计
    rowYRight += height_small + MARGIN;
    UIButton *statisticsUIButton = [self getUIButtonWithFrame:CGRectMake(rowXRight, rowYRight, width_10_4, height_small) color:[UIColor colorWithRed:254/255.0 green:134/255.0 blue:74/255.0 alpha:1.0]];
    [statisticsUIButton addTarget:self action:@selector(statistics:) forControlEvents:UIControlEventTouchUpInside];
    UIView *statisticsView = [[UIView alloc] initWithFrame:CGRectMake((width_10_4 - 120) / 2, (height_small - 44) / 2, 120, 44)];
    statisticsView.userInteractionEnabled = NO;
    UIImageView *statisticsImg = [self getImageViewWithImageName:@"icon_tongji" XYPoint:CGPointMake(0,7) type:IMAGE_TYPE_30];
    UILabel *statisticsLabel = [self getLabelWithTitle:@"统计" frame:CGRectMake(35, 12, 85, 20)];
    [statisticsView addSubview:statisticsImg];
    [statisticsView addSubview:statisticsLabel];
    [statisticsUIButton addSubview:statisticsView];
    if ([@"0" isEqualToString:row4Array[1]]) {
        [statisticsUIButton setHidden:YES];
    }
 
    
    [_mainView addSubview:checkInUIButton];
    [_mainView addSubview:uploadUIButton];
    [_mainView addSubview:pollingUIButton];
    [_mainView addSubview:fastPollingUIButton];
    [_mainView addSubview:rectificateUIButton];
    [_mainView addSubview:fastRectificateUIButton];
    [_mainView addSubview:checkUIButton];
    [_mainView addSubview:recentlyViewedUIButton];
    [_mainView addSubview:myFavoritesUIButton];
    [_mainView addSubview:gotoWorkPlanUIButton];
    [_mainView addSubview:photoManageUIButton];
    [_mainView addSubview:statisticsUIButton];
    [_mainView addSubview:rankingUIButton];
    [_mainView addSubview:uploadCoordinateUIButton];
    [_mainView addSubview:announceUIButton];
    [_mainView addSubview:shakingUIButton];
    
    _scrollView.contentSize = CGSizeMake(0, totalHeight);
    [_scrollView addSubview:_mainView];
    _scrollView.showsVerticalScrollIndicator = NO;
}

- (UIButton *)getUIButtonWithFrame:(CGRect)frame color:(UIColor *)color {
    UIButton *button = [[UIButton alloc] initWithFrame:frame];
    [button setBackgroundColor:color];
    return button;
}

- (UIImageView *)getImageViewWithImageName:(NSString *)imageName XYPoint:(CGPoint)point type:(NSString *)type {
    UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:imageName]];
    if ([IMAGE_TYPE_30 isEqual:type]) {
        imageView.frame = CGRectMake(point.x, point.y, 30.0, 30.0);
    } else if ([IMAGE_TYPE_60 isEqual:type]) {
        imageView.frame = CGRectMake(point.x, point.y, 60.0, 60.0);
    }
    
    return imageView;
}

- (UILabel *)getLabelWithTitle:(NSString *)title frame:(CGRect)frame {
    UILabel *label = [[UILabel alloc] initWithFrame:frame];
    label.text = title;
    label.textColor = [UIColor whiteColor];
    label.font = [UIFont systemFontOfSize:14.0];
    label.userInteractionEnabled = NO;
    
    return label;
}

- (void) viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    //每次进入都需要检查下上传的图片数量是否变化
    [self updateUploadablePicNum];
}

#pragma mark 签到
- (IBAction)checkIn:(id)sender {
    UIViewController *validateViewController = [[ValidateViewController alloc] initWithNibName:@"ValidateViewController" bundle:nil];
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:validateViewController];
    [self.navigationController presentViewController:nav animated:YES completion:nil];
}

#pragma mark 上传
- (IBAction)upload:(id)sender {
    [self doUpload:nil];
}

#pragma mark 巡检
- (IBAction)polling:(id)sender {
    //进入工程列表页面
    [self.tabBarController setSelectedIndex:1];
}

#pragma mark 快捷巡检
- (IBAction)fastPolling:(id)sender {
    //快速巡检
    [self quickJumpToSingleProject];
}

#pragma mark 整改
- (IBAction)rectificate:(id)sender {
    [AppConfigure setObject:@"4" ForKey:TASK_SHOW_MODE];
    [self.tabBarController setSelectedIndex:2];
}

#pragma mark 快捷整改
- (IBAction)fastRectificate:(id)sender {
    [LogUtils Log:TAG content:@"快捷整改"];
}

#pragma mark 抽查
- (IBAction)check:(id)sender {
    [AppConfigure setObject:@"3" ForKey:TASK_SHOW_MODE];
    [self.tabBarController setSelectedIndex:2];
}

#pragma mark 最近浏览
- (IBAction)recentlyViewed:(id)sender {
    //最近浏览
    MyBrowseViewController *browseViewController = [[MyBrowseViewController alloc] initWithNibName:@"MyBrowseViewController" bundle:nil];
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:browseViewController];
    [self.navigationController presentViewController:nav animated:YES completion:nil];
}

#pragma mark 我的收藏
- (IBAction)myFavorites:(id)sender {
    //我的收藏
    MyFavoriteViewController *favViewController = [[MyFavoriteViewController alloc] initWithNibName:@"MyFavoriteViewController" bundle:nil];
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:favViewController];
    [self.navigationController presentViewController:nav animated:YES completion:nil];
}

#pragma mark 出工计划
- (IBAction)goToWorkPlan:(id)sender {
    [LogUtils Log:TAG content:@"出工计划"];
    CooperatePlanView *cooperatePlanController = [[CooperatePlanView alloc] init];
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:cooperatePlanController];
    [self.navigationController presentViewController:nav animated:YES completion:nil];
}

#pragma mark 照片管理
- (IBAction)photosManage:(id)sender {
    //照片管理
    PhotoBrowseController *photoBrowseController = [[PhotoBrowseController alloc] init];
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:photoBrowseController];
    [self.navigationController presentViewController:nav animated:YES completion:nil];
}

#pragma mark 统计
- (IBAction)statistics:(id)sender {
    [LogUtils Log:TAG content:@"统计"];
}

#pragma mark 排行榜
- (IBAction)ranking:(id)sender {
    [LogUtils Log:TAG content:@"排行榜"];
}

#pragma mark 照片样例
- (IBAction)photoSample:(id)sender {
    [LogUtils Log:TAG content:@"照片样例"];
}

#pragma mark 上传坐标
- (IBAction)uploadCoordinate:(id)sender {
    //照片管理
    UploadLocationViewController *uploadLocationViewController = [[UploadLocationViewController alloc] init];
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:uploadLocationViewController];
    [self.navigationController presentViewController:nav animated:YES completion:nil];
}

#pragma mark 通告
- (IBAction)announce:(id)sender {
    [LogUtils Log:TAG content:@"通告"];
}

#pragma mark 摇一摇
- (IBAction)shake:(id)sender {
    //摇一摇
    ShakeViewController *shakeViewController = [[ShakeViewController alloc] init];
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:shakeViewController];
    [self.navigationController presentViewController:nav animated:YES completion:nil];
}


- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - 重新登录
// 登录成功
- (void)loginSuccess {
    [self getUpdatableNum];
}

// 登录失败
- (void)loginFailed {

}

- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
}

- (void)initProgressAlert{
    progress = [[LoadingProgress alloc] initWithFrame:CGRectMake(0, 0, UI_SCREEN_WIDTH - 40, 80)];
    [progress showState:DOWNLOADING];
    progressAlert = [[CustomIOS7AlertView alloc] init];
    progressAlert.containerView = progress;
    [progressAlert show];
}

-(void)showFailMsg:(NSString *)string{
    [super showFailMsg:string];
    if(!progressAlert.isHidden) {
        [progressAlert close];
    }
}
//更新上传的数量
- (void) updateUINums : (NSString *) photoCounts siteCount : (NSString *) siteCount checkCount : (NSString *) checkCount problemReplyCount : (NSString *) problemReplyCount cooperateCount : (NSString *) cooperateCount{
    _uploadNum.text = [NSString stringWithFormat:@"上传(%@)",photoCounts];
    _pollingNum.text = [NSString stringWithFormat:@"巡检(%@)",siteCount];
    _rectificationNum.text = [NSString stringWithFormat:@"整改(%@)",problemReplyCount];
    _spotTestNum.text = [NSString stringWithFormat:@"抽查(%@)",checkCount];
    if (IsStringEmpty(cooperateCount) || [@"(null)" isEqualToString:cooperateCount]) {
        cooperateCount = @"0";
    }
    _planNum.text = [NSString stringWithFormat:@"出工计划(%@)",cooperateCount];
}

-(void)showCurrentReadPosition:(float)currentReadPosition{
    progress.label.text = [NSString stringWithFormat:@"已下载%0.0fk",currentReadPosition / 1024];
}

-(void)showProgressAlert{
    [progress showState:INSERTING];
}

-(void)closeProgressAlert{
    [progressAlert close];
}

//根据已经插入的数据量，更新ui
- (void) updateInsertDataProcess : (int) insertedCount updateTotalNum:(float)updateTotalNum {
    
    Main((^{
        if(insertedCount == updateTotalNum && !progressAlert.isHidden) {
            [progressAlert close];
            [SVProgressHUD showSuccessWithStatus:@"更新完成"];
        } else {
            if(insertedCount % 100 == 0) {
                //ui线程更新progress进度
                progress.progressBar.progress = (insertedCount / updateTotalNum);
                //下载数量
                progress.detailPercent.text = [NSString stringWithFormat:@"%d/%0.0f",insertedCount,updateTotalNum];
                //下载百分比
                progress.percent.text = [NSString stringWithFormat:@"%0.0f%%",insertedCount * 100 / updateTotalNum];
            }
        }
    }));
}

-(void)shwoUploadablePicNum:(NSString *)photoCounts{
    _uploadNum.text = [NSString stringWithFormat:@"上传(%@)",photoCounts];
}

-(void)setUploadProgressDelegate:(BaseFormDataRequest *)request{
    [request setUploadProgressDelegate:_uploadingProgress];
}

/**
 *  根据当前上传完成的图片序列号更新上传ui的显示
 *
 *  @param uploadingIndex 已上传图片的序列号
 */
- (void) updateUploadingUI : (NSInteger) uploadingIndex totalCounts:(NSInteger) totalCounts{
    if(totalCounts == uploadingIndex) {
        //上传完成
        _uploadView.hidden = NO;
        _uploadingView.hidden = YES;
        _uploadNum.text = @"上 传(0)";
    } else {
        //上传中
        _uploadView.hidden = YES;
        _uploadingView.hidden = NO;
        _uploadingPicNum.text = [NSString stringWithFormat:@"(%ld/%ld)",uploadingIndex,totalCounts];
    }
}

// 跳转到签到界面
- (void)jumpToLocation {
    UIViewController *validateViewController = [[ValidateViewController alloc] initWithNibName:@"ValidateViewController" bundle:nil];
    UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:validateViewController];
    [self.navigationController presentViewController:nav animated:YES completion:nil];
}

/**
 * 快速巡检
 */
- (void)quickJumpToSingleProject {
    [self showLocationVerifyAlertView];
}

#pragma mark 判断时间差，是否显示位置校验提示框
- (void) showLocationVerifyAlertView {
    if ([self getLocationTimeIntervalSinceCurrentDateIsTimeOut]) {
        UIAlertView *verifyAlert = [[UIAlertView alloc] initWithTitle:@"提示" message:@"您目前尚未完成位置和身份验证或者上次验证已超过24小时，是否立即验证？" delegate:self cancelButtonTitle:@"稍后再说" otherButtonTitles:@"现在验证", nil];
        verifyAlert.tag = _VERIFY;
        [verifyAlert show];
    } else {
        SingleProjectManager *singleProjectManager = [[SingleProjectManager alloc] initWithDb:db];
        NSDictionary *map = [singleProjectManager getNearestProject:((NSNumber *) ([AppConfigure objectForKey:LONGITUDE])).floatValue latitude:((NSNumber *) ([AppConfigure objectForKey:LATITUDE])).floatValue userid:[AppConfigure objectForKey:USERID]];
        if (map != nil) {
            SectionManager *sectionManager = [[SectionManager alloc] initWithDb:db];
            BOOL hasSection = [sectionManager getHasSelectionByProjectId:[map objectForKey:@"bo_single_project_id"] userid:[AppConfigure objectForKey:USERID]];
            if (hasSection) {
                SectionViewController *sectionViewController = [[SectionViewController alloc] initWithNibName:@"SectionViewController" bundle:nil];
                // 传入数据
                sectionViewController.projectDict = map;
                sectionViewController.projectID = [map objectForKey:@"bo_single_project_id"];
                sectionViewController.type = @"1";
                UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:sectionViewController];
                [self.navigationController presentViewController:nav animated:YES completion:nil];
            } else {// 没有分段存在，则跳转到关键控制点界面
                TableInfoViewController *tableInfoViewController = [[TableInfoViewController alloc] initWithNibName:@"TableInfoViewController" bundle:nil];
                // 传入数据
                tableInfoViewController.projectDict = map;
                tableInfoViewController.projectID = [map objectForKey:@"bo_single_project_id"];
                tableInfoViewController.type = @"1";
                tableInfoViewController.sectionID = @"null";
                UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:tableInfoViewController];
                [self.navigationController presentViewController:nav animated:YES completion:nil];
            }
        } else {
            
        }
    }
}

/**
 *  判断最近一次定位是否不在有效时间区间内（时间区间：24小时）
 *
 *  @return 定位是否超时
 */
- (BOOL)getLocationTimeIntervalSinceCurrentDateIsTimeOut {
    // 获取最近一次定位的时间
    NSString *GPS_DATE_CURRENT_USERID = [NSString stringWithFormat:@"%@_%@", GPS_DATE, [AppConfigure objectForKey:USERID]];
    NSString *lastLocation = [AppConfigure objectForKey:GPS_DATE_CURRENT_USERID];
    if (IsStringEmpty(lastLocation)) {
        [LogUtils Log:TAG content:@"lastLocation = null"];
        return true;
    }
    //    NSLog(@"lastLocation = %@", lastLocation);
    NSDate *currentDate = [NSDate date];
    //    NSLog(@"currentDate = %f", [currentDate timeIntervalSince1970]);
    NSDate *lastLocationDate = [BaseFunction dateFromString:lastLocation dateFormat:DATE_LONG];
    //    NSLog(@"lastLocationDate = %f", [lastLocationDate timeIntervalSince1970]);
    double timeDifference = [currentDate timeIntervalSinceDate:lastLocationDate];
    //    [LogUtils Log:TAG content:[NSString stringWithFormat:@"timeDifference = %f", timeDifference]];
    
    return [self isTimeOut:timeDifference];
}

/**
 *  判断时间差(秒)是否超过24小时
 *
 *  @param timeDifference 时间差
 *
 *  @return 是否超过24小时
 */
- (BOOL)isTimeOut:(double)timeDifference {
    return timeDifference > 86400;
}

#pragma mark - update alertview delegate
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    [super alertView:alertView clickedButtonAtIndex:buttonIndex];
    if(buttonIndex == 1 && alertView.tag == _VERIFY) {
        // 打开签到界面
        [self jumpToLocation];
    }
}
@end
